---
- name: Configure hostname
  hostname:
    name: "{{ connectbox_default_hostname }}"

- name: Add hosts entry
  blockinfile:
    dest: /etc/hosts
    block: |
      127.0.0.1 {{ connectbox_default_hostname }}

- name: Create connectbox version file
  copy:
    content: "{{ connectbox_version }}\n"
    dest: /etc/connectbox-release

- name: Create connectbox group
  group:
    name: _connectbox
    system: yes

# Not strictly necessary but can be used for testing
- name: Create _connectbox user and to _connectbox group
  user:
    name: _connectbox
    group: _connectbox
    system: yes
    createhome: no

# TODO confirm this works as expected
- name: Add www-data to _connectbox group
  user:
    name: www-data
    groups: _connectbox
    append: yes

- name: Make scripts directory
  file:
    state: directory
    path: /usr/local/connectbox/bin
    owner: _connectbox
    group: _connectbox
    recurse: yes
    mode: 0755

- name: Make etc directory
  file:
    state: directory
    path: /usr/local/connectbox/etc
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make logs directory
  file:
    state: directory
    path: "{{ connectbox_log_dir }}"
    owner: _connectbox
    group: _connectbox
    recurse: yes
    mode: 0755

- name: Make var directory
  file:
    state: directory
    path: /usr/local/connectbox/var
    owner: _connectbox
    group: _connectbox
    mode: 0775

- name: Copy connectbox scripts
  copy:
    src: ../scripts/
    dest: /usr/local/connectbox/bin/
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make connectbox config overrides
  template:
    src: connectbox.conf.j2
    dest: /usr/local/connectbox/etc/connectbox.conf
    backup: yes
    owner: _connectbox
    group: _connectbox
    mode: 0644

- name: Copy connectbox basic auth credentials
  copy:
    content: "{{ connectbox_admin_credentials }}"
    dest: /usr/local/connectbox/etc/basicauth
    owner: _connectbox
    group: _connectbox
    mode: 0660

- name: allow connectbox group to execute connectbox scripts
  blockinfile:
    dest: /etc/sudoers
    validate: /usr/sbin/visudo --check --file="%s"
    block: |
      %_connectbox ALL=(ALL) NOPASSWD: /usr/local/connectbox/bin/

- name: expire chat messages
  cron:
    minute: "0,15,30,45"
    job: "curl -XDELETE http://127.0.0.1:{{ gunicorn_listen_port }}/chat/messages > /dev/null"

- name: install access-log-analyzer
  git:
    repo: '{{access_log_analyzer_repo}}'
    dest: /usr/local/access-log-analyzer

- name: Make access-log-analyzer etc directory
  file:
    state: directory
    path: /usr/local/access-log-analyzer/etc
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make access-log-analyzer var directory
  file:
    state: directory
    path: /usr/local/access-log-analyzer/var
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make access-log-analyzer config overrides
  template:
    src: access-log-analyzer.conf.j2
    dest: /usr/local/access-log-analyzer/etc/access-log-analyzer.conf
    backup: yes
    owner: _connectbox
    group: _connectbox
    mode: 0644

- name: Make hourly logrotate config
  template:
    src: logrotate.hourly.conf.j2
    dest: /etc/logrotate.hourly.conf
    backup: yes
    owner: root
    group: root
    mode: 0644

- name: Configure hourly logrotate for connectbox access logrotate
  copy:
    content: "#!/bin/sh\n/usr/sbin/logrotate /etc/logrotate.hourly.conf"
    dest: "/etc/cron.hourly/logrotate-hourly"
    mode: 0755
    owner: root
    group: root

# If the system is updated before any iptables modules are loaded
#  the system can't find the modules and iptables rules can't be
#  loaded first time. (A repeat ansible run seems to fix it, though).
# Let's avoid a first-time failure by doing the upgrade after the
#  iptables rules have been updated.
# Consistent with: https://serverfault.com/questions/593263/iptables-nat-does-not-exist
- name: Update existing packages
  apt:
    upgrade: safe
  tags:
  - full-build-only

# sshd forks child processes to handle connections, so stopping and disabling
#  sshd doesn't disconnect the session that's actually doing the stopping and
#  disabling (or the control session if pipelining is in use)
- name: Schedule disabling of sshd
  set_fact:
    final_command: "systemctl disable ssh && systemctl stop ssh"
  when: not developer_mode

# Run the final commands in a handler so any disabling is performed right at
#  the end of the playbook run, to extent that we can influence it. While
#  handlers are run in the order that they are defined within a role, it's
#  unclear how handlers are ordered when multiple roles fire handlers.
#
# This is a no-op force the handler to run (assuming the conditional passes)
- name: Schedule task to do final disabling
  assert:
    that:
      - True
  when: final_command != ""
  changed_when: True
  notify: Run final disabling commands
