---


# Needs to happen prior to partitioning
- name: Create moodledata directory that Moodle requires for all its functions
  file:
    state: directory
    path: /var/www/moodledata/
    owner: www-data
    group: www-data
    mode: 0775

###########################################
# Raspberry Pi partitioning
- name: Get Name of SD card
  shell: lsblk -d | grep disk | awk '{print $1;}'
  register: sdcard_name
  when: connectbox_os == "raspbian"

- name: Read SD card information 
  community.general.parted: device=/dev/{{ sdcard_name.stdout }} unit=MiB
  register: sdcard_info
  when: connectbox_os == "raspbian"

- name: Extend the existing OS partition to 4 GB so we have enough space to load all The Well software
  community.general.parted:
    device: /dev/{{ sdcard_name.stdout }}
    number: "{{ sdcard_info.partitions | length }}"
    part_end: "4GB"
    resize: true
    state: present
  when: connectbox_os == "raspbian" and sdcard_info.partitions | length < 3

- name: Complete the resize filesystem of OS partition 
  command: resize2fs /dev/{{ sdcard_name.stdout }}p2
  become: true
  when: connectbox_os == "raspbian" and sdcard_info.partitions | length < 3

- name: Re-Read SD card information 
  community.general.parted: device=/dev/{{ sdcard_name.stdout }} unit=MiB
  register: sdcard_info
  when: connectbox_os == "raspbian"


##########################################
# These next 3 tasks handle the partitioning of the extra space on Pi SD Card.  Only run if not building an image
- name: Copy resizer.pl to /home/pi
  template:
    src: home_pi_resizer_pl.j2
    dest: /boot/resizer.pl
    owner: root
    group: root
    mode: 0700
  when: connectbox_os == "raspbian" and sdcard_info.partitions | length < 3 and not do_image_preparation
  
- name: Run resizer.pl
  command: /boot/resizer.pl
  become: true
  when: connectbox_os == "raspbian" and sdcard_info.partitions | length < 3 and not do_image_preparation

- name: Mount All Partitions
  command: mount -a
  become: true
  when: connectbox_os == "raspbian" and sdcard_info.partitions | length < 3 and not do_image_preparation
 
  
# Check early on to see if the style of interface names need to be changed
#  (only applicable to Ubuntu, and not when we're running virtualised)
# We do this before the check for the Armbian reboot oracle. If we need
#  to reboot to activate the old-style interface names, we'll sort out the
#  reboot oracle too, but if the reboot oracle check is before this check
#  we'll need to reboot a second time (after creating the symlink)
- name: setup use of old-style interface names for predictability across devices
  file:
    dest: /etc/udev/rules.d/80-net-setup-link.rules
    src: /dev/null
    state: link
  when: ansible_virtualization_type == "NA"
  register: old_style_names

- name: Request reboot if interface naming style has changed
  set_fact:
    reboot_required: True
  when: old_style_names.changed
  tags: skip_ansible_lint

# Check early on to see whether the OS needs to be
# rebooted to allow a disk expansion step to complete.
# This is Armbian only, but the check doesn't hurt others.
- name: Check for resize2fs reboot oracle
  stat:
    path: "/var/run/resize2fs-reboot"
  register: resize2fs_reboot

# If the oracle above exists then we shouldn't continue
- name: Fail when disk expansion is incomplete
  set_fact:
    reboot_required: True
  when: resize2fs_reboot.stat.exists == True

# Disable automated apt-y things before attempting to install packages
# unattended-upgrades and apt.systemd.daily only run on Ubuntu
- name: Stop automated apty services
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ apty_services }}"

# Needs to happen before the initial reboot, given the job triggers actions
#  on @reboot
- name: Disable armbian auto-update processes
  file:
    path: /etc/cron.d/armbian-updates
    state: absent
  when: connectbox_os == "armbian"

# The system takes 5-10 seconds to disappear from the network
#  so let's wait 15 seconds before doing our first check
#  Use newer ansible 2.7 function reboot
- name: Reboot device for changes to take effect
  reboot:
    post_reboot_delay=15
    pre_reboot_delay=2
  when: reboot_required

- name: Get current rfkill state for interface 0 (wireless LAN) on Raspbian
  command: cat /sys/class/rfkill/rfkill0/soft
  register: rfkill0_state
  ignore_errors: yes
  changed_when: False
  when: connectbox_os == "raspbian"

# Raspbian-lite buster and onwards rfkill wlan0 by default, which causes
#  problems when we try to start wlan0 (at hostapd reload)
# This change persists across reboots, so it's safe to do here.
- name: Unblock rfkill'ed interface 0 (wireless LAN) on Raspbian
  command: /usr/sbin/rfkill unblock 0
  when: "connectbox_os == 'raspbian' and '0' not in rfkill0_state.stdout"

- name: Get current rfkill state for interface 1 (wireless LAN) on Raspbian
  command: cat /sys/class/rfkill/rfkill1/soft
  register: rfkill1_state
  ignore_errors: yes
  changed_when: False
  when: connectbox_os == "raspbian"

# Raspbian-lite buster and onwards rfkill wlan1 by default, which causes
#  problems when we try to start wlan1 (at hostapd reload)
# This change persists across reboots, so it's safe to do here.
- name: Unblock rfkill'ed interface 1 (wireless LAN) on Raspbian
  command: /usr/sbin/rfkill unblock 1
  when: "connectbox_os == 'raspbian' and '0' not in rfkill1_state.stdout"

- name: Set default locale
  lineinfile:
    path=/etc/default/locale
    state=present
    line="LC_ALL=en_US.UTF-8"
  when: connectbox_os == "armbian"

# Needed for package upgrades via ansible (aptitude safe-upgrade)
- name: Install apt
  apt:
    name: apt
    state: present

# mikegleasonjr.firewall assumes iptables but Armbian doesn't ship with it
- name: Install iptables
  apt:
    name: iptables
    state: present
  when: connectbox_os == "armbian"

# Only repopulate daily so we don't slow runs down unnecessarily
- name: Populate apt cache
  apt:
    update-cache: yes
    cache_valid_time: 86400 # 1 day

# We build our own armbian images, so we need to prevent upstream
#  kernel, dtb and uboot packages from being installed (lest they
#  overwrite our changes)
# This task will bomb if we're running on a sunxi device and using
#  something other than the "next" branch or using something other
#  than stretch
# We use aptitude instead of apt-hold because aptitude's first run clears
#  the package holds which causes us to upgrade these packages.
# aptitude doesn't give any indication about whether the package was
#  already on hold, so it's not possible to show whether this task
#  changed anything (and it's not worth lead-up tasks to work out
#  whether this task would do anything i.e. using aptitude search ~ahold
- name: Pin kernel and dtb packages
  command: "aptitude -q hold linux-dtb-next-sunxi linux-image-next-sunxi linux-u-boot-nanopineo-next linux-stretch-root-next-nanopineo"
  when: connectbox_os == "armbian" and "sunxi" in ansible_kernel

# If we ever allow updates of the linux-...-root device package, this will
#  need to move into a service or some other method (noting the package
#  overwrites /etc/default/cpufrequtils)
# See https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt for
#  an explanation of the governors. The choice to use conservative was
#  not driven by data, so choose something different if data is available.
- name: Enable conservative CPU frequency governor on physical devices (for next restart)
  lineinfile:
    path: /etc/default/cpufrequtils
    regexp: '^GOVERNOR='
    line: 'GOVERNOR=conservative'
  when: connectbox_os == "armbian"

# Needed by Debian Stretch
- name: Install openresolv
  apt:
    name: openresolv
    state: present
  when: ansible_lsb["id"] == "Debian"

# Needed in several subsequent roles
- name: Install packages for python virtualenv
  apt:
    name: ['python-virtualenv', 'python-pip', 'virtualenv']
    state: present
  tags:
    - captive_portal

# Needed in several subsequent roles
- name: install git
  apt:
    name: git
    state: present

# See if we need to create a wlan0 interface when we're running in a sim
#  environment i.e. running virtualised
- name: Create a wlan0 interface
  command: /sbin/ip link add wlan0 type dummy
  when: "'wlan0' not in ansible_interfaces and ansible_virtualization_type != 'NA'"
