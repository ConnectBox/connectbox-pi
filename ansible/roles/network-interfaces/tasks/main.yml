---

- name: Check if NetworkManager package is installed
  command: dpkg -s network-manager
  register: nm_installed_check
  failed_when: nm_installed_check.rc > 1

- name: Check if the command is running
  command: service --status-all
  register: nm_installed_test

- name: Stop NetworkManager
  service:
    name: network-manager
    state: stopped
    enabled: no
  when: nm_installed_test.stdout is search('network-manager')

- name: Remove NetworkManager
  apt:
    pkg: network-manager
    state: absent

- name: Make sure systemd-resolved is not running
  service:
    name: systemd-resolved
    state: stopped
    enabled: no

- name: Install usbmuxd for Tethering iPhones
  apt:
    package: usbmuxd
    state: present

- name: Install usb-modeswitch for techtering android
  apt:
    package: usb-modeswitch
    state: present

- name: Configure network interfaces NEO
  template:
    src: etc_network_interfaces.j2
    dest: /etc/network/interfaces
    owner: root
    group: root
    mode: 0644
  register: etc_network_interfaces

- name: Configure network interfaces.j2 base
  template:
    src: etc_network_interfaces.j2
    dest: /etc/network/interfaces.j2
    owner: root
    group: root
    mode: 0644

- name: Configure /etc/wpa_supplicant/template direcotry
  file:
     path: /etc/wpa_supplicant/templates
     state: directory  

- name: Configure wpa_supplicant.conf
  template:
    src: wpa_supplicant.conf.j2
    dest: /etc/wpa_supplicant/wpa_supplicant.conf
    owner: root
    group: root
    mode: 0644

- name: Configure wpa_supplicant/templates 
  template:
    src: wpa_supplicant.conf.j2
    dest: /etc/wpa_supplicant/templates/wpa_supplicant.conf.j2
    owner: root
    group: root
    mode: 0644

- name: Copy over the new dhcpcd.conf files
  template:
    src: etc_dhcpcd.conf.j2
    dest: /etc/dhcpcd.conf 
    owner: root
    group: root
    mode: 0644

- name: Add items dhcpcd under init.d
  blockinfile:
    path: /etc/init.d/dhcpcd
    insertafter: "### END INIT INFO"
    block: |
      # This fires up the WLAN0 on Pi
      /usr/local/connectbox/bin/wlan0.pl &
  when: (not aws_instance) and (connectbox_os != "armbian") and (connectbox_os != 'ubuntu') and (not OZ2_present)
  ignore_errors:

# name: create directory /etc/dhcp/etc_dhcp_dhclient-enter-hooks
- file: 
    path: /etc/dhcp/dhclient-enter-hooks
    owner: root
    group: root
    state: directory

- name: Add items dhcpcd under /etc/dhcp/dhclient-enter-hooks.d/ 
  template:
    src: etc_dhcp_dhclient-enter-hooks_wlan0.pl 
    dest: /etc/dhcp/dhclient-enter-hooks/wlan0.pl 
    owner: root
    group: root
    mode: 0755
  when: not aws_instance and OZ2_present

- name: Register the release number
  shell:
    cmd: (uname -r)
  register: kernel_num


- name: give the current kernel number
  debug:
    msg: "Current Kernel # is: {{ kernel_num.stdout }}"

- name: set the default values for variables for drivers
  ansible.builtin.set_fact:
    compile_a : false
    compile_b : false
    compile_c : false
    driver_a1 : false
    driver_b1 : false
    driver_c1 : false 
    changed1 : false
    changed2 : false
    changed3 : false
    changed4 : false

- name: Check for drivers that already exisist and we compiled for this release
  copy:
    src: "{{ kernel_num.stdout }}/"
    dest: "/usr/lib/modules/{{ kernel_num }}/kernel/drivers/net/wireless/"
    owner: root
    group: root
    mode: '0644'
  register: found_drivers
  ignore_errors: true 

- name: tell if we found pre-compiled drivers
  debug:
    msg: "We found pre-compiled drivers on the build system!"
  ignore_errors: yes
  when: not found_drivers.failed

- name: check for exsisting drivers in os 
  shell: "ls -R /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/"
  register: List_output
  ignore_errors: true

- name: cleanup list_output
  ansible.builtin.set_fact:
    listoutput:  "{{ List_output.stdout }}"

- debug:
    msg: "builtin driver are:\n {{ listoutput }}"

- name: Get the drives we care about to see if they exsists.
  set_fact:
    rtl88XXd : '{{ rtl88XXdriver }}'
    rtl8812d : '{{ rtl8812driver }}'
    rtw88d : '{{ rtw88driver }}'
    rtl88xbd : '{{ rtl88xbudriver }}'
    rtl88x2bd : '{{ rtl88x2budriver }}'
    rtl8852ad : '{{ rtl8852audriver }}'
  vars:
    rtl88XXdriver: "{{ (listoutput.find('88XXau') >=0 ) }}"
    rtl8812driver: "{{ (listoutput.find('8812au') >=0 ) }}"
    rtw88driver: "{{ (listoutput.find('rtw88' ) >=0 ) }}"
    rtl88xbudriver: "{{ (listoutput.find('88xbu') >=0 ) }}"
    rtl88x2budriver: "{{ (listoutput.find('88x2bu') >=0 ) }}"
    rtl8852audriver: "{{ (listoutput.find('8852au') >=0 ) }}"

- debug:
    msg: "Variable pulled Listoutput rtl88xxdriver: {{ rtl88XXd }}"

- debug:
    msg: "variable pulled listoutput rtl8812driver: {{ rtl8812d }}"

- debug:
    msg: "variable pulled listoutput rtw88driver: {{ rtw88d }}"

- debug:    
    msg: "variable pulled listoutput rtlX88xbudriver: {{ rtl88xbd }}"

- debug:
    msg: "variable pulled listoutput rtl88x2budriver: {{ rtl88x2bd }}"

- debug:   
    msg: "variable pulled listoutput rtl52audriver: {{ rtl8852ad }}"

  
- name: Let the user know that we found the drivers
  debug:
    msg: We found the drivers already compiled on the system for some kernels
  when: (rtl88XXd or rtl8812d or rtl88xbd or rtl88x2bd or rtl8852ad or rtw88d)

- name: Lets get the dmesg and check for exsisting installed driver 
  command: dmesg -H
  register: dmesgout

- name: Normazlie the output 
  ansible.builtin.set_fact:
    dmesgoutput:  "{{ dmesgout.stdout }}"  

- name: Get the drives we care about to see if they exsists.
  set_fact:
    rtl88XXdp : '{{ rtl88XXdriverp }}'
    rtl8812dp : '{{ rtl8812driverp }}'
    rtl88xbdp : '{{ rtl88xbudriverp }}'
    rtw88dp   : '{{ rtw88dpdriverp }}'
    rtl88x2bdp : '{{ rtl88x2budriverp }}'
    rtl8852adp : '{{ rtl8852audriverp }}'
  vars:
    rtl88XXdriverp : "{{ (dmesgoutput.find('88XXau') >=0 ) }}"
    rtl8812driverp : "{{ (dmesgoutput.find('8812au') >=0 ) }}"
    rtl88xbudriverp : "{{ (dmesgoutput.find('88xbu') >=0 ) }}"
    rtw88dpdriverp : "{{ (dmesgoutput.find('rtw88') >=0 ) }}"
    rtl88x2budriverp : "{{ (dmesgoutput.find('88x2bu') >=0 ) }}"
    rtl8852audriverp : "{{ (dmesgoutput.find('8852au') >=0 ) }}"


- name: lets check for exsisting 8812au driver
  shell: echo ("true" |bool)
  register: driver_a1
  ignore_errors: yes
  when: ((rtl8812d) or (rtl88XXd) or (rtl88XXdp) or (rtl8812dp))

- name: lets check for the 8812bu driver
  shell: echo ("true" |bool)
  register: driver_b1
  ignore_errors: yes
  when: ((rtl88xbd ) or (rtl88XXd) or (rtw88d) or (rtl88x2bd) or (rtl88XXdp) or (rtl88xbdp) or (rtw88dp) or (rtl88x2bdp))

- name: lets check for the 8852au driver
  shell: echo ("true" |bool)
  register: driver_c1
  ignore_errors: yes
  when: ((rtl8852ad) or  (rtl8852adp))

- name: Insert the driver into the kernel modules 8812au
  command: insmod  /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/rtl8812au/8812au.ko*
  ignore_errors: yes
  register: changed1
  when: driver_a1

- name: insert the driver into the kernel modules 88x2bu
  command: insmod  /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/rtl88x2bu/88x2bu.ko*
  ignore_errors: yes
  register: changed2
  when: (rtl88x2dp or rtl88XXdp or rtl88x2bdp)

- name: insert the driver into the kernel modules 8852au
  command: insmod  /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/realtek/rtw89/8852au.ko*
  ignore_errors: yes
  register: changed3
  when: (rtl8852adp)

#- name: Insert the driver into the kernel module rtw88 
#  command: insmod /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/rtw88.ko 
#  ignore_errors: yes
#  register: changed4
#  when: (rtw88dp)

#- name: Insert the usb driver into the kernel module rtw88
#  command: insmod /usr/lib/modules/{{ kernel_num.stdout }}/kernel/drivers/net/wireless/usb.ko 
#  ignore_errors: yes
#  when: (rtw88dp)

- name: finish the module dependancies
  command: depmod
  ignore_errors: yes
  when: changed1.changed or changed2.changed or changed3.changed or changed4.changed 

- name: Copy over the script to test for drivers in realtime.  We may need them for the alternate kernel
  copy:
    src: loadwifi.sh 
    dest: /usr/local/connectbox/bin/
    owner: root
    group: root
    mode: '0777'

- name: Create a variable based on the results of the finds for compile_a
  command: echo ('true').stdout
  register: compile_a
  when: (not rtl88xbdp) and (not rtl88XXdp) and (not rtl8812dp) and (not rtl88XXdp)

#- name: Create a variable based on the result of the finds for compile_d
#  command: echo ('true' |bool).stdout
#  register: compile_d
#  when: (not rtw88d) and (not rtw88dp)

- name: Create a variable based on the results ofthe finds for compile_b
  command: echo ('true').stdout
  register: compile_b
  when: ((not rtl88x2bdp) and (not rtl88XXdp) and (not rtl88xbdp) and (not rtl88x2bd) and (not rtl88XXd) and (not rtl88xbd)) 

- name: Create a variable based on the results of the finds of compile_c
  command: echo ('true').stdout
  register: compile_c
  when: ((not rtl8852ad) and (not rtl8852adp)) 

# Note we have already upgraded the OS to the lattest in role bootstrap
# now we just install the current OS build tools

- debug:
    msg: "outputs of compiles are a: {{ compile_a }}, b: {{ compile_b }}, c: {{ compile_c }} \n"

- debug:
    msg: "We need to compile the 8812au drivers"
  when: (compile_a.changed)

- debug:
    msg: "We need to compile the 88x2bu driver"
  when: (compile_b.changed)

- debug:
    msg: "we need to compile the 8852au drivers"
  when: (compile_c.changed)

#- debug:
#    msg: "we need to compile the rtw88 driver"
#  when: compile_d

- name: Create a compile variable
  command: echo ('true' | bool).stdout
  register: compile_all
  when: ((compile_a.changed) or (compile_b.changed) or (compile_c.changed))

- debug:
    msg: "connectbox_os is {{ connectbox_os }}"


- name: apt install build tools
  apt:
    pkg:
    - build-essential
    - bc
    - libelf-dev
    - libssl-dev
    state: present
  ignore_errors: yes
  when: (compile_all,changed)

- name: apt install raspberrypi-kernel-headers
  apt:
    pkg:
    - raspberrypi-kernel-headers
    state: present
  ignore_errors: yes
  when: ((connectbox_os == "raspbian") and (compile_all,changed))

# or apt-get install linux-headers-$(uname -r)
- name: apt install linux-headers-current-sunxi
  apt:
    pkg:
    - linux-headers-current-sunxi
    state: present
  ignore_errors: yes 
  when: ((connectbox_os != "raspbian") and (compile_all,changed))


- name: Copy over 8812au-install script for Raspian
  copy:
    src: 8812au-install.sh
    dest: /tmp/8812au-install.sh
    mode: "+x"
  ignore_errors: yes
  when: (compile_a.changed)

- name: Compile the 8812au driver for Raspbian or NEO
  command:
     chdir: /tmp
     cmd: "sh 8812au-install.sh"
  ignore_errors: yes
  when: (compile_a.changed)

- name: Copy over 88x2bu-install script
  copy:
    src: 88x2bu-install.sh
    dest: /tmp/88x2bu-install.sh
    mode: "+x"
  ignore_errors: yes
  when: (compile_b.changed)

- name: Compile the 88x2bu driver for Raspbian or NEO
  command:
     chdir: /tmp
     cmd: "sh 88x2bu-install.sh"
  ignore_errors: yes
  when: (compile_b.changed)


- name: Copy over 8852au.install script
  copy:
    src: 8852au-install.sh 
    dest: /tmp/8852au-install.sh 
    mode: "+x"
  ignore_errors: yes
  when: (compile_c.changed)

- name: Compile the 8852au driver via script for raspbian or neo 
  command:
     chdir: /tmp 
     cmd: "sh 8852au-install.sh"
  ignore_errors: yes
  when: (compile_c.changed)

#- name: Copy over rtw88.install script
#  copy:
#    src: rtw88-usb-install.sh 
#    dest: /tmp/rtw88-install.sh 
#    mode: "+x"
#  ignore_errors: yes
#  when: compile_d

#- name: Compile the rtw88 driver via script for raspbian or neo 
#  command:
#     chdir: /temp 
#     cmd: "sh rtw88-usb-install.sh"
#  ignore_errors: yes
#  when: compile_d

#- name: Fetch the compiled 8812au driver to control machine
#  fetch:
#    src: /tmp/rtl8812au*/88x12au.ko 
#    dest: "~/connectbox/connectbox-tools/{{ kernel_num }}_8812au.ko"
#    fail_on_missing: yes
#    flat: yes
#  ignore_errors: yes
#  when: compile_a

#- name: Fetch the compiled 8812bu driver to control machine
#  fetch:
#    src: /tmp/rtl88x2bu*/88x12bu.ko 
#    dest: "~/connectbox/connectbox-tools/{{ kernel_num }}_8812bu.ko"
#    fail_on_missing: yes
#    flat: yes
#  ignore_errors: yes
#  when: compile_b


- name: Remove headers for raspbian
  apt:
    pkg:
    - raspberrypi-kernel-headers
    state: absent
  ignore_errors: yes
  when: ((compile_all.changed) and (connectbox_os == "raspbian"))

# or remove linux-headers-$(uname -r)
- name: apt install linux-headers-current-sunxi
  apt:
    pkg:
    - linux-headers-current-sunxi
    state: absent
  ignore_errors: yes
  when: ((connectbox_os != "raspbian") and  (compile_all.changed))


- name: remove build tools
  apt:
    pkg:
    - build-essential
    - bc
    - libelf-dev
    - libssl-dev
    - raspbewrrypi-kernel-headers
    state: absent
  ignore_errors: yes
  when:  (compile_all.changed)

- name: remove links
  command: sudo rm /lib/modules/$(uname -r)/build
  ignore_errors: yes
  when:  (compile_all.changed)

- name: remove links
  command: then sudo rm /tmp/$(uname -r)
  ignore_errors: yes
  when:  (compile_all.changed)
  
# Note: this is not a handler because we need the network configuration in
# effect before proceeding with the wifi-ap and firewall roles, which will
# otherwise fail if not.
- name: Restart network
  service:
    name: systemd-networkd.service
    state: restarted
  when: etc_network_interfaces
  tags:
    # This task on change is intentionally not a handler; don't trigger ANSIBLE0016
    - skip_ansible_lint


